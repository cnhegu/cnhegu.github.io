# .github/workflows/deploy.yml

name: Deploy Hugo site to GitHub Pages

on:
  push:
    branches:
      - main # 确保这是你的主分支名
  workflow_dispatch:

# 关键：为工作流设置权限，使其可以部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 设置并发控制，确保每次只有一个部署在运行
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    steps:
      # 第 1 步：检出你的仓库代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # 第 2 步：安装最新版的 Hugo (Extended 版本)
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # 第 3 步：下载并更新 Hugo 模块 (包括你的主题)
      - name: Update Hugo Modules
        run: hugo mod get -u

      # 第 4 步（调试用）：检查文件内容
      - name: 🕵️ Check Content of _index.md
        run: |
          echo "--- Verifying content of _index.md on the runner ---"
          cat ./content/about/_index.md
          echo "--- End of file content ---"

      # 第 5 步：执行 Hugo 构建，并强制忽略缓存
      - name: Build with Hugo
        run: hugo --minify --ignoreCache # <--- 这里是唯一的修改

      # 第 6 步：配置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 第 7 步：将构建好的网站 (public 目录) 打包成构件
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 第 8 步：从构件部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4