name: Deploy GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # 使用 Concurrency 确保每次只有一个部署在运行
    concurrency:
      group: "pages"
      cancel-in-progress: true
      
    steps:
      # 第 1 步：检出主仓库 (不拉取子模块)
      - name: Checkout repository (Main Project Only)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      # 第 2 步：安装 Hugo 环境
      # 必须在主题克隆前完成，确保 'hugo' 命令可用
      - name: Setup Hugo Environment
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      # 第 3 步：【关键修复】强制克隆主题、设置权限和清理模块
      - name: Force Clone Theme Submodule & Clean Cache
        # 使用 PAT 令牌和 HTTPS 强制克隆主题，解决所有权限和认证问题
        run: |
          # 1. 设置 Git 凭证 (使用 PAT 令牌)
          # 替换 cnhegu 为你的实际用户名
          git config --global url."https://cnhegu:${{ secrets.DEPLOY_TOKEN }}@github.com/".insteadOf "git@github.com:"
          
          # 2. 强制删除并克隆你的主题仓库 (指向你的 Fork)
          rm -rf themes/meme
          git clone --depth 1 https://github.com/cnhegu/hugo-theme-meme.git themes/meme
          
          # 3. 强制设置权限 (解决 Linux 虚拟机上的权限问题)
          chmod -R 755 themes/meme
          
          # 4. 清理 Hugo 模块缓存 (解决顽固的资源加载缓存)
          hugo mod clean
          
          # 5. 检查主题是否成功克隆
          if [ ! -d "themes/meme" ]; then
            echo "::error::Theme cloning failed."
            exit 1
          fi

      # 第 4 步：运行 hugo 命令，生成静态网站文件
      - name: Build with Hugo
        run: hugo

      # 第 5 步：将生成的 public 文件夹部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          cname: www.hegu.me
